package org.kinkydesign.decibell.db;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.kinkydesign.decibell.annotations.Constraint;
import org.kinkydesign.decibell.annotations.Entry;
import org.kinkydesign.decibell.annotations.ForeignKey;
import org.kinkydesign.decibell.annotations.PrimaryKey;
import org.kinkydesign.decibell.collections.ComponentRegistry;
import org.kinkydesign.decibell.collections.OnModification;
import org.kinkydesign.decibell.collections.TypeMap;
import org.kinkydesign.decibell.core.Component;
import org.kinkydesign.decibell.db.table.Table;
import org.kinkydesign.decibell.db.table.TableColumn;
import org.kinkydesign.decibell.exceptions.NoPrimaryKeyException;

/**
 *
 * @author Pantelis Sopasakis
 * @author Charalampos Chomenides
 */
public class TablesGenerator {

    ComponentRegistry registry = null;
    DbConnector connector = null;
    Set<Class<? extends Component>> components = null;
    Set<Field> relations = new HashSet<Field>();

    public TablesGenerator(DbConnector connector, Set<Class<? extends Component>> components) {
        this.connector = connector;
        this.components = components;
        registry = new ComponentRegistry(connector);
    }

    public void construct() {        
        for (Class<? extends Component> c : components) {
            tableCreation(c);
        }
        relTableCreation();
        Iterator<Table> it = ComponentRegistry.getRegistry(connector).values().iterator();
        while (it.hasNext()) {
            connector.execute(it.next().getCreationSQL());
        }
        it = registry.getRelationTables().iterator();
        while (it.hasNext()) {
            connector.execute(it.next().getCreationSQL());
        }
    }

    private void tableCreation(Class<? extends Component> c) {
        Table table = new Table();
        if (registry.containsKey( c)) {
            return;
        }
        if (c.getSuperclass() != Component.class && !registry.containsKey((Class<? extends Component>) c.getSuperclass())) {
            tableCreation((Class<? extends Component>) c.getSuperclass());
        }
        table.setTableName(connector.getUser() + "." + c.getName().replace(".", "_"));
        for (Field field : c.getDeclaredFields()) {
            boolean flag = false;
            TableColumn column = new TableColumn();
            column.setColumnName(field.getName());
            column.setColumnType(TypeMap.getSQLType(field.getType()));
            Annotation ann = null;
            if ((ann = field.getAnnotation(PrimaryKey.class)) != null) {
                PrimaryKey pk = (PrimaryKey) ann;
                column.setPrimaryKey(true, pk.autoGenerated());
                flag = true;
            }
            if ((ann = field.getAnnotation(Entry.class)) != null) {
                Entry entry = (Entry) ann;
                column.setUnique(entry.unique());
                column.setNotNull(entry.notNull());
                if (!entry.defaultValue().isEmpty()) {
                    column.setDefaultValue(entry.defaultValue());
                }
                flag = true;
            }
            if ((ann = field.getAnnotation(Constraint.class)) != null) {
                Constraint constraint = (Constraint) ann;
                if (!constraint.low().isEmpty()) {
                    column.setLow(constraint.low());
                }
                if (!constraint.high().isEmpty()) {
                    column.setHigh(constraint.high());
                }
                boolean dom = false;
                for (String s : constraint.domain()) {
                    if (!s.isEmpty()) {
                        dom = true;
                    }
                }
                if (dom) {
                    column.setDomain(constraint.domain());
                }
            }
            if ((ann = field.getAnnotation(ForeignKey.class)) != null) {
                ForeignKey fk = (ForeignKey) ann;
                if (isCollection(field.getType())) {
                    Type type = field.getGenericType();
                    if (!(type instanceof ParameterizedType)) {
                        throw new ClassCastException("Bad ForeignKey specified - Class:" + field.getDeclaringClass().getName()
                                + " Field:" + field.getName() + " contains unknown types");
                    } else {
                        ParameterizedType pt = (ParameterizedType) type;
                        for (Type arg : pt.getActualTypeArguments()) {
                            Class carg = (Class) arg;
                            if (!isComponent(carg)) {
                                throw new ClassCastException("Bad ForeignKey specified - Class:" + field.getDeclaringClass().getName()
                                        + " Field:" + field.getName() + " contains non-Component types");
                            }
                        }
                    }
                    relations.add(field);
                    flag = false;
                } else {
                    if (isComponent(field.getType())) {
                        if (!registry.containsKey((Class<? extends Component>)field.getType())) {
                            tableCreation((Class<? extends Component>) field.getType());
                        }
                        for (TableColumn col : registry.get((Class<? extends Component>)field.getType()).getPrimaryKeyColumns()) {
                            TableColumn foreignColumn = new TableColumn();
                            if (column.hasDefault()) {
                                foreignColumn.setDefaultValue(column.getDefaultValue());
                            }
                            if (column.isConstrained()) {
                                if (column.hasHigh()) {
                                    foreignColumn.setHigh(column.getHigh());
                                }
                                if (column.hasLow()) {
                                    foreignColumn.setLow(column.getLow());
                                }
                                if (column.hasDomain()) {
                                    foreignColumn.setDomain(column.getDomain());
                                }
                            }
                            foreignColumn.setNotNull(column.isNotNull());
                            foreignColumn.setPrimaryKey(column.isPrimaryKey(), column.isAutoGenerated());
                            foreignColumn.setUnique(column.isUnique());
                            foreignColumn.setColumnName(field.getName() + "_" + col.getColumnName());
                            foreignColumn.setColumnType(col.getColumnType());
                            foreignColumn.setForeignKey(connector.getUser() + "." + field.getType().getName().replace(".", "_"),
                                    col.getColumnName(), fk.onDelete(), fk.onUpdate());
                            foreignColumn.setReferencesClass((Class<? extends Component>) field.getType());
                            table.addColumn(foreignColumn);
                            flag = false;
                        }
                    } else {
                        throw new ClassCastException("Bad ForeignKey specified - Class:" + field.getDeclaringClass().getName()
                                + " Field:" + field.getName() + " is not a Component");
                    }
                }
            }
            if (flag) {
                table.addColumn(column);
            }
        }
        if (table.getPrimaryKeyColumns().isEmpty()) {
            if (c.getSuperclass() != Component.class) {
                for (TableColumn col : registry.get((Class<? extends Component>) c.getSuperclass()).getPrimaryKeyColumns()) {
                    TableColumn column = new TableColumn();
                    column.setColumnName(col.getColumnName());
                    column.setColumnType(col.getColumnType());
                    column.setForeignKey(connector.getUser() + "." + c.getSuperclass().getName().replace(".", "_"),
                            col.getColumnName(), OnModification.NO_ACTION, OnModification.NO_ACTION);
                    column.setReferencesClass((Class<? extends Component>) c.getSuperclass());
                    column.setPrimaryKey(true, false);
                    table.addColumn(column);
                }
            } else {
                throw new NoPrimaryKeyException("Component " + c.getName() + " does not have a valid declared primary key");
            }
        }
        registry.put((Class<? extends Component>) c, table);
    }

    private void relTableCreation() {
        for (Field f : relations) {
            Table table = new Table();
            ParameterizedType pt = (ParameterizedType) f.getGenericType();
            for (Type arg : pt.getActualTypeArguments()) {
                Class carg = (Class) arg;
                table.setTableName(connector.getUser() + "."
                        + f.getDeclaringClass().getName().replace(".", "_")
                        + "_AND_" + carg.getName().replace(".", "_"));
                Table master = registry.get((Class<? extends Component>) f.getDeclaringClass());
                Table slave = registry.get((Class<? extends Component>) carg);
                Set<TableColumn> masterKeys = master.getPrimaryKeyColumns();
                Set<TableColumn> slaveKeys = slave.getPrimaryKeyColumns();
                for (TableColumn col : masterKeys) {
                    TableColumn column = col.clone();
                    column.setForeignKey(master.getTableName().split("\\.",0)[1], col.getColumnName(),
                            OnModification.CASCADE, OnModification.NO_ACTION);
                    column.setColumnName(master.getTableName().split("\\.",0)[1] + "_" + col.getColumnName());
                    table.addColumn(column);
                }
                for (TableColumn col : slaveKeys) {
                    TableColumn column = col.clone();
                    column.setForeignKey(slave.getTableName().split("\\.",0)[1], col.getColumnName(),
                            OnModification.CASCADE, OnModification.NO_ACTION);
                    column.setColumnName(slave.getTableName().split("\\.",0)[1] + "_" + col.getColumnName());
                    table.addColumn(column);
                }
                master.addRelation(table);
                slave.addRelation(table);
            }
            registry.setRelationTable(table);
        }
    }

    private boolean isComponent(Class c) {
        return TypeMap.isSubClass(c, Component.class);
    }

    private boolean isCollection(Class c) {
        return TypeMap.isSubClass(c, Collection.class);
    }

    private Set<Field> getPrimaryKeys(Class c) {
        Field[] fields = c.getDeclaredFields();
        Set<Field> primaryKeys = new HashSet<Field>();
        for (Field f : fields) {
            if (f.getAnnotation(PrimaryKey.class) != null) {
                primaryKeys.add(f);
            }
        }
        if (primaryKeys.isEmpty()) {
            throw new NoPrimaryKeyException("Component " + c.getName() + " does not have a valid declared primary key");
        }
        return primaryKeys;
    }
}
