/**
 *  Class : InsertQuery
 *  Date  : Apr 8, 2010
 *   .       .     ..
 *  _| _  _.*|_  _ ||
 * (_](/,(_.|[_)(/,||
 *
 * DeciBell : A Java Tool for creating and managing relational databases.
 *  DeciBell is a Object - Relation database mapper for java applications providing
 * an easy-to-use interface making it easy for the developer to build a relational
 * database and moreover perform database operations easily!
 *  This project was developed at the Automatic Control Lab in the Chemical Engineering
 * School of the National Technical University of Athens. Please read README for more
 * information.
 *
 * Copyright (C) 2009-2010 Charalampos Chomenides & Pantelis Sopasakis
 *                         kinkyDesign ~ OpenSource Development

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact:
 * hampos Att yahoo d0t c0m
 * chvng att mail D0t ntua dd0T gr
 * Address: Iroon Politechniou St. 9, Zografou, Athens Greece
 * tel. +30 210 7723236
 */
package org.kinkydesign.decibell.db.query;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import org.kinkydesign.decibell.db.interfaces.JTable;
import org.kinkydesign.decibell.db.interfaces.JTableColumn;

/**
 *
 * @author Pantelis Sopasakis
 * @author Charalampos Chomenides
 */
public abstract class InsertQuery implements SQLQuery {

    private JTable table;
    /**
     * A map from the table column to its corresponding value in the INSERT query,
     * e.g. (A, 2)
     */
    protected LinkedHashMap<JTableColumn, String> columnValuesMap = new LinkedHashMap<JTableColumn, String>();

    public InsertQuery() {
    }

    public InsertQuery(JTable table) {
        setTable(table);
    }

    public abstract String getSQL();

    public void setTable(JTable table) {
        this.table = table;
        setColumns(table.getTableColumns());
    }

    public JTable getTable() {
        return table;
    }

    public Collection<? extends JTableColumn> getColumns() {
        return columnValuesMap.keySet();
    }

    public void setColumns(Collection<? extends JTableColumn> tableColumns) {
        for (JTableColumn tc : tableColumns) {
            if (!tc.isAutoGenerated()) {
                columnValuesMap.put(tc, null);
            }
        }
    }

    public boolean addProposition(Proposition proposition) {
        throw new UnsupportedOperationException("Insert Queries do not support Propositions");
    }

    public ArrayList<Proposition> getPropositions() {
        throw new UnsupportedOperationException("Insert Queries do not support Propositions");
    }

    public Proposition removeProposition(Proposition proposition) {
        throw new UnsupportedOperationException("Insert Queries do not support Propositions");
    }

    public Proposition removeProposition(int position) {
        throw new UnsupportedOperationException("Insert Queries do not support Propositions");
    }

    public void setPropositions(ArrayList<Proposition> propositions) {
        throw new UnsupportedOperationException("Insert Queries do not support Propositions");
    }

    public Proposition replaceProposition(int position, Proposition proposition) {
        throw new UnsupportedOperationException("Insert Queries do not support Propositions");
    }

    public void setNull(JTableColumn tableColumn) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, null);
    }

    public void setUnknown(JTableColumn tableColumn) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, "?");
    }

    public void setLong(JTableColumn tableColumn, long longValue) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, Long.toString(longValue));
    }

    public void setDouble(JTableColumn tableColumn, double doubleValue) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, Double.toString(doubleValue));
    }

    public void setFloat(JTableColumn tableColumn, float floatValue) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, Float.toString(floatValue));
    }

    public void setShort(JTableColumn tableColumn, short shortValue) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, Short.toString(shortValue));
    }

    public void setInt(JTableColumn tableColumn, int integerValue) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, Integer.toString(integerValue));
    }

    public void setString(JTableColumn tableColumn, String stringValue) {
        if (!columnValuesMap.containsKey(tableColumn)) {
            throw new IllegalArgumentException("TableColumn not in specified table!");
        }
        columnValuesMap.put(tableColumn, "'" + stringValue + "'");
    }

    public void setInfinity(JTableColumn column) {
        throw new UnsupportedOperationException("Insert Queries do not support infinite Values.");
    }
}
