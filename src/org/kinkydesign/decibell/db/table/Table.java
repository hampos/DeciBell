/**
 *   .       .     ..
 *  _| _  _.*|_  _ ||
 * (_](/,(_.|[_)(/,||
 *
 * DeciBell : A Java Tool for creating and managing relational databases.
 *  DeciBell is a Object - Relation database mapper for java applications providing
 * an easy-to-use interface making it easy for the developer to build a relational
 * database and moreover perform database operations easily!
 *  This project was developed at the Automatic Control Lab in the Chemical Engineering
 * School of the National Technical University of Athens. Please read README for more
 * information.
 *
 * Copyright (C) 2009-2010 Charalampos Chomenides & Pantelis Sopasakis
 *                         kinkyDesign ~ OpenSource Development

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact:
 * hampos Att yahoo d0t c0m
 * chvng att mail D0t ntua dd0T gr
 * Address: Iroon Politechniou St. 9, Zografou, Athens Greece
 * tel. +30 210 7723236
 */
package org.kinkydesign.decibell.db.table;

import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 *
 * A Table in the database is characterized by its columns. This class offers a
 * flexible tool for manipulating database tables (creating and deleting them).
 *
 * @author Pantelis Sopasakis
 * @author Charalampos Chomenides
 */
public class Table {

    private Set<TableColumn> listOfColumns = new LinkedHashSet<TableColumn>();
    private String tableName = null;

    /**
     * Construct a new Table object.
     */
    public Table() {
        super();
    }

    /**
     * Construct a new Table object, given its name.
     * @param tableName
     */
    public Table(String tableName) {
        this();
        if (tableName == null) {
            throw new NullPointerException("The name of a table cannot be null");
        }
        this.tableName = tableName;
    }

    /**
     * Retrieve the list of columns of the table.
     * @return list of table columns.
     */
    public Set<TableColumn> getTableColumns() {
        return listOfColumns;
    }

    /**
     * Declare the list of table columns of the table.
     * @param tableColumns table columns.
     */
    public void setTableColumns(Set<TableColumn> tableColumns) {
        this.listOfColumns = tableColumns;
    }

    /**
     * Add a new column to the table.
     * @param column table column to be added in the table.
     */
    public void addColumn(TableColumn column) {
        if (column == null) {
            throw new NullPointerException("You cannot add a null column");
        }
        if (column.getColumnName() == null) {
            throw new NullPointerException("You cannot add a column without a name");
        }
        if (column.getColumnType() == null) {
            throw new NullPointerException("Column " + column.getColumnName() + " must have an SQL type");
        }
        this.listOfColumns.add(column);
    }

    /**
     * Remove a column from the table.
     * @param column column to be removed.
     */
    public void removeColumn(TableColumn column) {
        this.listOfColumns.remove(column);
    }

    /**
     * Set/update the name of the table.
     * @param tableName the name of the table.
     */
    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    /**
     * Get the name of the table.
     * @return table name.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Get the SQL command for the creation of the table.
     * @return SQL command for table creation.
     */
    public String getCreationSQL() {
        String SQL = "CREATE TABLE " + getTableName() + "\n( ";
        Iterator<TableColumn> it = listOfColumns.iterator();
        while (it.hasNext()) {
            TableColumn column = it.next();
            SQL = SQL + column.getColumnName() + " " + column.getColumnType().toString();

            if (column.isUnique()) {
                SQL += " UNIQUE";
            }
            if (column.isNotNull() || column.isPrimaryKey()) {
                SQL += " NOT NULL";
            }
            if (column.isAutoGenerated()) {
                SQL += " GENERATED ALWAYS AS IDENTITY ";
            }

            if (column.hasDefault()) {
                SQL += column.getDefaultValue();
            }

            if (column.isConstrained()) {
                SQL += column.getConstraint();
            }
            SQL += ",\n";
        }
        if (!getForeignKeyColumns().isEmpty()) {
            Set<TableColumn> foreignColumns = new LinkedHashSet<TableColumn>(getForeignKeyColumns());
            while (!foreignColumns.isEmpty()) {
                it = foreignColumns.iterator();
                TableColumn fk = it.next();
                it.remove();
                String foreignKey = "FOREIGN KEY (" + fk.getColumnName();
                String references = "REFERENCES " + fk.getReferenceTable() + "(" + fk.getReferenceColumn();
                String options = " ON DELETE " + fk.getOnDelete() + " ON UPDATE " + fk.getOnUpdate();
                while (it.hasNext()) {
                    TableColumn c = it.next();
                    if (fk.getReferenceTable().equals(c.getReferenceTable())) {
                        foreignKey += "," + c.getColumnName();
                        references += "," + c.getReferenceColumn();
                        it.remove();
                    }
                }
                foreignKey += ") ";
                references += ") ";
                SQL += foreignKey + references + options + ",\n";
            }
        }
        SQL += " PRIMARY KEY (";
        it = getPrimaryKeyColumns().iterator();
        while (it.hasNext()) {
            SQL += it.next().getColumnName();
            if (it.hasNext()) {
                SQL += ",";
            }
        }
        SQL += ")";
        SQL = SQL + "\n)";
        return SQL;
    }

    /**
     * Get the SQL command for the removal of the table from the database.
     * @return SQL command for dropping.
     */
    public String getDeletionSQL() {
        String SQL = "DROP TABLE " + getTableName();
        return SQL;
    }

    public Set<TableColumn> getPrimaryKeyColumns() {
        Set<TableColumn> primaryKeyColumns = new LinkedHashSet<TableColumn>();
        for (TableColumn column : listOfColumns) {
            if (column.isPrimaryKey()) {
                primaryKeyColumns.add(column);
            }
        }
        return primaryKeyColumns;
    }

    public Set<TableColumn> getForeignKeyColumns() {
        Set<TableColumn> foreignKeyColumns = new LinkedHashSet<TableColumn>();
        for (TableColumn column : listOfColumns) {
            if (column.isForeignKey()) {
                foreignKeyColumns.add(column);
            }
        }
        return foreignKeyColumns;
    }
}
