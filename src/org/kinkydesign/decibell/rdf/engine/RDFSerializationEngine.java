/**
 *  Class : RDFSerializationEngine
 *  Date  : May 24, 2010
 *   .       .     ..
 *  _| _  _.*|_  _ ||
 * (_](/,(_.|[_)(/,||
 *
 * DeciBell : A Java Tool for creating and managing relational databases.
 *  DeciBell is a Object - Relation database mapper for java applications providing
 * an easy-to-use interface making it easy for the developer to build a relational
 * database and moreover perform database operations easily!
 *  This project was developed at the Automatic Control Lab in the Chemical Engineering
 * School of the National Technical University of Athens. Please read README for more
 * information.
 *
 * Copyright (C) 2009-2010 Charalampos Chomenides & Pantelis Sopasakis
 *                         kinkyDesign ~ OpenSource Development

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact:
 * hampos Att yahoo d0t c0m
 * chvng att mail D0t ntua dd0T gr
 * Address: Iroon Politechniou St. 9, Zografou, Athens Greece
 * tel. +30 210 7723236
 */
package org.kinkydesign.decibell.rdf.engine;

import com.hp.hpl.jena.datatypes.xsd.XSDDatatype;
import com.hp.hpl.jena.ontology.Individual;
import org.kinkydesign.decibell.collections.SQLType;
import org.kinkydesign.decibell.core.ComponentRegistry;
import org.kinkydesign.decibell.db.TableColumn;
import org.kinkydesign.decibell.db.interfaces.JTable;
import org.kinkydesign.decibell.db.interfaces.JTableColumn;
import org.kinkydesign.decibell.rdf.ns.DBClass;
import org.kinkydesign.decibell.rdf.ns.DBDataTypeProperties;
import org.kinkydesign.decibell.rdf.ns.DBObjectProperties;
import org.kinkydesign.decibell.rdf.ns.DBSQLTypes;
import org.kinkydesign.decibell.rdf.ns.OntEntity;
import org.kinkydesign.decibell.rdf.ns.OntObject;

/**
 *
 * @author Pantelis Sopasakis
 * @author Charalampos Chomenides
 */
public class RDFSerializationEngine {

    private static Individual createTableColumnIndividual(JTableColumn input, OntObject oo) {
        Individual tableColumn = oo.createIndividual(OntEntity.DECIBELL_BASE + input.getColumnName(),
                DBClass.TableColumn().getResource());

        tableColumn.addLiteral(DBDataTypeProperties.tcName(oo),
                oo.createTypedLiteral(input.getColumnName(), XSDDatatype.XSDstring));

        tableColumn.addLiteral(DBDataTypeProperties.hasDomain(oo),
                oo.createTypedLiteral(input.hasDomain(), XSDDatatype.XSDboolean));
        tableColumn.addLiteral(DBDataTypeProperties.hasHigh(oo),
                oo.createTypedLiteral(input.hasHigh(), XSDDatatype.XSDboolean));
        tableColumn.addLiteral(DBDataTypeProperties.hasLow(oo),
                oo.createTypedLiteral(input.hasLow(), XSDDatatype.XSDboolean));
        tableColumn.addLiteral(DBDataTypeProperties.isForeignKey(oo),
                oo.createTypedLiteral(input.isForeignKey(), XSDDatatype.XSDboolean));
        if (input.isTypeNumeric()) {
            tableColumn.addLiteral(DBDataTypeProperties.isAutoGen(oo),
                    oo.createTypedLiteral(input.isAutoGenerated(), XSDDatatype.XSDboolean));
        }
        tableColumn.addLiteral(DBDataTypeProperties.isPrimaryKey(oo),
                oo.createTypedLiteral(input.isPrimaryKey(), XSDDatatype.XSDboolean));
        tableColumn.addLiteral(DBDataTypeProperties.isNotNull(oo),
                oo.createTypedLiteral(input.isNotNull(), XSDDatatype.XSDboolean));
        tableColumn.addLiteral(DBDataTypeProperties.isUnique(oo),
                oo.createTypedLiteral(input.isUnique(), XSDDatatype.XSDboolean));
        if (input.hasDefault()) {
            tableColumn.addLiteral(DBDataTypeProperties.defaultValue(oo),
                    oo.createTypedLiteral(input.getDefaultValue(), XSDDatatype.XSDstring));
        }
        if (input.isTypeNumeric() && input.getNumericNull()!=null){
            tableColumn.addLiteral(DBDataTypeProperties.numericNull(oo),
                    oo.createTypedLiteral(input.getNumericNull(), XSDDatatype.XSDdouble));
        }

        Individual datatype = oo.createIndividual(DBSQLTypes.fromSQLTypes(input.getColumnType()).getURI(),
                DBClass.SQLType().getResource());

        tableColumn.addProperty(DBObjectProperties.sqlDataType(oo), datatype);

        if (input.isForeignKey()) {
            if (!input.isSelfReferencing()) {
                tableColumn.addProperty(DBObjectProperties.columnReferencesColumn(oo),
                        createTableColumnIndividual(input.getReferenceColumn(), oo));
            } else {
                tableColumn.addProperty(DBObjectProperties.columnReferencesColumn(oo), tableColumn);
            }
            tableColumn.addLiteral(DBDataTypeProperties.onDelete(oo),
                    oo.createTypedLiteral(input.getOnDelete().toString(), XSDDatatype.XSDstring));
            tableColumn.addLiteral(DBDataTypeProperties.onUpdate(oo),
                    oo.createTypedLiteral(input.getOnUpdate().toString(), XSDDatatype.XSDstring));
        }
        return tableColumn;
    }

    public static OntObject serialize(JTableColumn input) {
        OntObject oo = new OntObject();
        oo.includeOntClasses(DBClass.TableColumn(), DBClass.SQLType());
        createTableColumnIndividual(input, oo);
        return oo;
    }

    public static OntObject serialize(JTable input) {
        throw new UnsupportedOperationException();
    }

    public static OntObject serialize(ComponentRegistry input) {
        throw new UnsupportedOperationException();
    }

    public static void main(String... args){
        JTableColumn tc=  new TableColumn("cxxd");
        tc.setColumnType(SQLType.BIGINT);
        tc.setNumericNull("4");
        serialize(tc).printConsole();
    }

    
}
